{"ast":null,"code":"import axios from 'axios';\nimport { message } from 'antd';\nlet loadingInstance = {\n  close: () => {} // process.env.NODE_ENV === 'development' ? \"http://10.111.108.161:8080/enterprise/\" : 'http://123.207.49.214:8028'\n  // 创建axios实例\n\n};\nconsole.log(process.env.NODE_ENV);\nconst baseURL = \"http://10.111.108.161:8080/enterprise/\";\nconsole.log(localStorage.getItem('Token'));\nconst service = axios.create({\n  baseURL: baseURL,\n  // api的base_url\n  timeout: 5000,\n  // 请求超时时间\n  //设置默认请求头，使post请求发送的是formdata格式数据// axios的header默认的Content-Type好像是'application/json;charset=UTF-8',我的项目都是用json格式传输，如果需要更改的话，可以用这种方式修改\n  headers: {\n    // \"Content-Type\": \"application/x-www-form-urlencoded\"\n    Token: localStorage.getItem('Token')\n  } // withCredentials: true, // 允许携带cookie\n\n});\n\nfunction cloneLoading() {\n  loadingInstance.close();\n} // request拦截器\n\n\nservice.interceptors.request.use(config => {\n  return config;\n}, error => {\n  cloneLoading(); // Do something with request error\n\n  Promise.reject(error);\n}); // respone拦截器\n\nservice.interceptors.response.use(response => {\n  cloneLoading();\n\n  if (response.data && response.data.code === 0) {\n    message.error(response.data.message, 1.5);\n  } else if (response.data && response.data.code === 200 && response.data.message) {\n    message.success(response.data.message, 1.5);\n  }\n\n  return response.data;\n}, error => {\n  console.log('err' + error); // for debug\n\n  cloneLoading();\n\n  if (error && error.response) {\n    console.log(error);\n\n    switch (error.response.status) {\n      case 400:\n        error.desc = '请求错误';\n        break;\n\n      case 401:\n        error.desc = '未授权，请登录';\n        break;\n\n      case 403:\n        error.desc = '拒绝访问';\n        break;\n\n      case 404:\n        error.desc = \"\\u8BF7\\u6C42\\u5730\\u5740\\u51FA\\u9519: \".concat(error.response.config.url);\n        break;\n\n      case 408:\n        error.desc = '请求超时';\n        break;\n\n      case 500:\n        error.desc = '服务器内部错误';\n        break;\n\n      case 501:\n        error.desc = '服务未实现';\n        break;\n\n      case 502:\n        error.desc = '网关错误';\n        break;\n\n      case 503:\n        error.desc = '服务不可用';\n        break;\n\n      case 504:\n        error.desc = '网关超时';\n        break;\n\n      case 505:\n        error.desc = 'HTTP版本不受支持';\n        break;\n    }\n\n    message.error(error.desc);\n  }\n\n  return Promise.reject(error);\n});\nexport default {\n  service,\n  baseURL\n};","map":{"version":3,"sources":["H:\\框架实例\\React\\easy-admin\\src\\api\\http.js"],"names":["axios","message","loadingInstance","close","console","log","process","env","NODE_ENV","baseURL","localStorage","getItem","service","create","timeout","headers","Token","cloneLoading","interceptors","request","use","config","error","Promise","reject","response","data","code","success","status","desc","url"],"mappings":"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","sourcesContent":["import axios from 'axios'\r\nimport { message } from 'antd';\r\nlet loadingInstance = {\r\n    close: () => { }\r\n}\r\n// process.env.NODE_ENV === 'development' ? \"http://10.111.108.161:8080/enterprise/\" : 'http://123.207.49.214:8028'\r\n// 创建axios实例\r\nconsole.log(process.env.NODE_ENV)\r\nconst baseURL = \"http://10.111.108.161:8080/enterprise/\"\r\nconsole.log(localStorage.getItem('Token'))\r\nconst service = axios.create({\r\n    baseURL: baseURL, // api的base_url\r\n    timeout: 5000, // 请求超时时间\r\n    //设置默认请求头，使post请求发送的是formdata格式数据// axios的header默认的Content-Type好像是'application/json;charset=UTF-8',我的项目都是用json格式传输，如果需要更改的话，可以用这种方式修改\r\n    headers: {\r\n        // \"Content-Type\": \"application/x-www-form-urlencoded\"\r\n        Token: localStorage.getItem('Token')\r\n    },\r\n    // withCredentials: true, // 允许携带cookie\r\n})\r\nfunction cloneLoading() {\r\n    loadingInstance.close()\r\n}\r\n\r\n// request拦截器\r\nservice.interceptors.request.use(config => {\r\n    return config\r\n}, error => {\r\n    cloneLoading()\r\n    // Do something with request error\r\n    Promise.reject(error)\r\n})\r\n\r\n// respone拦截器\r\nservice.interceptors.response.use(\r\n    response => {\r\n        cloneLoading()\r\n        if (response.data && response.data.code === 0) {\r\n            message.error(response.data.message, 1.5)\r\n        } else if (response.data && response.data.code === 200 && response.data.message) {\r\n            message.success(response.data.message, 1.5)\r\n        }\r\n        return response.data\r\n    }, error => {\r\n        console.log('err' + error)// for debug\r\n        cloneLoading()\r\n        if (error && error.response) {\r\n            console.log(error)\r\n            switch (error.response.status) {\r\n                case 400:\r\n                    error.desc = '请求错误'\r\n                    break;\r\n                case 401:\r\n                    error.desc = '未授权，请登录'\r\n                    break;\r\n                case 403:\r\n                    error.desc = '拒绝访问'\r\n                    break;\r\n                case 404:\r\n                    error.desc = `请求地址出错: ${error.response.config.url}`\r\n                    break;\r\n                case 408:\r\n                    error.desc = '请求超时'\r\n                    break;\r\n                case 500:\r\n                    error.desc = '服务器内部错误'\r\n                    break;\r\n                case 501:\r\n                    error.desc = '服务未实现'\r\n                    break;\r\n                case 502:\r\n                    error.desc = '网关错误'\r\n                    break;\r\n                case 503:\r\n                    error.desc = '服务不可用'\r\n                    break;\r\n                case 504:\r\n                    error.desc = '网关超时'\r\n                    break;\r\n                case 505:\r\n                    error.desc = 'HTTP版本不受支持'\r\n                    break;\r\n            }\r\n            message.error(error.desc)\r\n        }\r\n        return Promise.reject(error)\r\n    })\r\n\r\nexport default { service, baseURL }\r\n\r\n"]},"metadata":{},"sourceType":"module"}